---
/**
 * Author: Nicole Dávila Hernández
 * 
 * Description: This is the creation page for multiple users via a CVS file.
 * Test file for this page can be found at src/data/users.csv
 */

import TextHeader from '@components/TextHeader.astro';
import MainLayout from '@layouts/MainLayout.astro';
import ModalWrapper from '@components/ModalWrapper.tsx';

import { getCookie } from '@data/cookies';
import type { UserRole } from '@type/roles';
import { roleLabels } from '@config/role-labels';

const role: UserRole = getCookie("role") as UserRole;
const userName = getCookie("username");
const buttonLabel = roleLabels[role];
---

<MainLayout title="Cargar Usuarios desde CSV" data={{ userName, buttonLabel, role }}>
  <div>
    <TextHeader
      title="CARGAR USUARIOS"
      subtitle="Seleccione o arrastre un archivo CSV para importar múltiples usuarios"
    />

    <main class="bg-white rounded-lg shadow-md p-8 space-y-6">

      <!-- Drag and Drop Upload Area -->
      <div
        id="dropZone"
        class="w-full h-64 flex flex-col items-center justify-center border-2 border-dashed border-primary-400 rounded-lg bg-primary-100/20 text-primary-400 hover:bg-primary-100 transition cursor-pointer text-center px-4"
      >
        <p class="text-lg font-semibold">Selecciona un archivo o arrástralo aquí</p>
        <p id="fileName" class="text-sm text-secondary-500 mt-2">Ningún archivo seleccionado</p>
        <input type="file" id="csvInput" accept=".csv" class="hidden" />
      </div>

      <!-- Preview Table -->
      <div id="previewContainer" class="hidden">
        <h3 class="text-lg font-bold text-primary-400 mb-2">Usuarios a Crear</h3>
        <table class="min-w-full border border-gray-300 text-sm">
          <thead class="bg-gray-100 text-left">
            <tr>
              <th class="px-4 py-2">Nombre</th>
              <th class="px-4 py-2">Correo</th>
              <th class="px-4 py-2">Teléfono</th>
              <th class="px-4 py-2">Rol</th>
              <th class="px-4 py-2">Departamento</th>
              <th class="px-4 py-2">CeCo</th>
              <th class="px-4 py-2">Eliminar</th>
            </tr>
          </thead>
          <tbody id="userTableBody"></tbody>
        </table>
      </div>

      <!-- Submit All -->
      <div id="submitContainer" class="flex justify-end hidden">
        <ModalWrapper
          client:only="react"
          title="Confirmar Carga"
          message="¿Está seguro de que desea cargar estos usuarios?"
          variant="filled"
          button_type="primary"
          modal_type="confirm"
        >
          Cargar Todos
        </ModalWrapper>
      </div>
    </main>
  </div>
</MainLayout>

<script is:inline>
  let parsedUsers = [];

  const dropZone = document.getElementById('dropZone');
  const fileInput = document.getElementById('csvInput');
  const fileNameSpan = document.getElementById('fileName');

  dropZone.addEventListener('click', () => fileInput.click());

  dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.classList.add('bg-primary-100');
  });

  dropZone.addEventListener('dragleave', () => {
    dropZone.classList.remove('bg-primary-100');
  });

  dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.classList.remove('bg-primary-100');
    const file = e.dataTransfer.files[0];
    if (file) {
      fileInput.files = e.dataTransfer.files;
      handleCSVFile(file);
    }
  });

  fileInput.addEventListener('change', function () {
    const file = this.files[0];
    if (file) handleCSVFile(file);
  });

  function handleCSVFile(file) {
    fileNameSpan.textContent = file.name;

    const reader = new FileReader();
    reader.onload = function () {
      const text = reader.result;
      parsedUsers = parseCSV(text);
      renderTable();
    };
    reader.readAsText(file);
  }

  function parseCSV(text) {
    const rows = [];
    const lines = text.trim().split('\n');

    const headers = splitCSVLine(lines[0]);
    for (let i = 1; i < lines.length; i++) {
      const values = splitCSVLine(lines[i]);
      if (values.length !== headers.length) continue;

      const user = {};
      headers.forEach((h, j) => {
        user[h.trim()] = values[j].trim();
      });
      rows.push(user);
    }
    return rows;
  }

  function splitCSVLine(line) {
    const result = [];
    let value = '';
    let inQuotes = false;

    for (let i = 0; i < line.length; i++) {
      const char = line[i];
      const nextChar = line[i + 1];

      if (char === '"' && inQuotes && nextChar === '"') {
        value += '"';
        i++;
      } else if (char === '"') {
        inQuotes = !inQuotes;
      } else if (char === ',' && !inQuotes) {
        result.push(value);
        value = '';
      } else {
        value += char;
      }
    }
    result.push(value);
    return result;
  }

  function renderTable() {
    const tableBody = document.getElementById('userTableBody');
    const previewContainer = document.getElementById('previewContainer');
    const submitContainer = document.getElementById('submitContainer');

    tableBody.innerHTML = '';
    if (parsedUsers.length === 0) {
      previewContainer.classList.add('hidden');
      submitContainer.classList.add('hidden');
      return;
    }

    parsedUsers.forEach((user, index) => {
      const row = document.createElement('tr');
      row.classList.add('border-t');

      row.innerHTML = `
        <td class="px-4 py-2">${user.user_name || ''}</td>
        <td class="px-4 py-2">${user.email || ''}</td>
        <td class="px-4 py-2">${user.phone_number || ''}</td>
        <td class="px-4 py-2">${user.role_name || ''}</td>
        <td class="px-4 py-2">${user.department_name || ''}</td>
        <td class="px-4 py-2">${user.costs_center || ''}</td>
        <td class="px-4 py-2 text-red-500 cursor-pointer hover:underline" onclick="removeUser(${index})">✕</td>
      `;
      tableBody.appendChild(row);
    });

    previewContainer.classList.remove('hidden');
    submitContainer.classList.remove('hidden');
  }

  function removeUser(index) {
    parsedUsers.splice(index, 1);
    renderTable();
  }
</script>
