---
/**
 * Author: Michael Devlyn
 * 
 * Description: Admin users page - fetch from real backend API
 * Strategy: Parallel requests to get users faster
 */

 import MainLayout from "@layouts/MainLayout.astro";
import TextHeader from "@components/TextHeader.astro";
import TableFallback from "@components/Table/TableFallback.astro";

import type { UserRole } from "@type/roles";
import { getCookie } from "@data/cookies";
import { roleLabels } from "@config/role-labels";
import { apiRequest } from "@utils/apiClient";

// Define the User interface
interface User {
  user_id: number;
  user_name: string;
  email: string;
  role_name: string;
  department_name: string;
  active?: boolean;
}

// Function to get all users with parallel requests (faster)
async function getAllUsersParallel(): Promise<User[]> {
  const users: User[] = [];
  const maxUsers = 10000; // Reasonable upper limit
  const batchSize = 10; // Process 10 users at a time
  
  for (let startId = 1; startId <= maxUsers; startId += batchSize) {
    const endId = Math.min(startId + batchSize - 1, maxUsers);
    const promises: Promise<User | null>[] = [];
    
    // Create batch of parallel requests
    for (let id = startId; id <= endId; id++) {
      promises.push(
        apiRequest(`/user/get-user-data/${id}`)
          .then((userData) => {
            if (userData && userData.user_id && userData.active !== false) {
              return {
                user_id: userData.user_id,
                user_name: userData.user_name,
                email: userData.email,
                role_name: userData.role_name,
                department_name: userData.department_name,
                active: userData.active
              };
            }
            return null;
          })
          .catch(() => null)
      );
    }
    
    // Wait for batch to complete
    const batchResults = await Promise.all(promises);
    
    // Add valid users to array
    const validUsers = batchResults.filter((user): user is User => user !== null);
    users.push(...validUsers);
    
    // If no users found in this batch, we might be done
    if (validUsers.length === 0) {
      break;
    }
  }
  
  // Sort users by ID for consistent display
  users.sort((a, b) => a.user_id - b.user_id);
  
  return users;
}

// FETCH REAL DATA FROM BACKEND
let users: User[] = [];
let errorMessage: string | null = null;

try {
  // Get all users using parallel enumeration
  users = await getAllUsersParallel();
  
  if (users.length === 0) {
    throw new Error('No users found via ID enumeration');
  }
  
} catch (error) {
  console.error('Error fetching users via enumeration:', error);
  errorMessage = `Failed to load user data: ${error instanceof Error ? error.message : 'Unknown error'}`;
  users = [];
}

const role: UserRole = getCookie("role") as UserRole;
const userName = getCookie("username");
const buttonLabel = roleLabels[role];
---

<MainLayout title="Administrar Usuarios" data={{ userName, buttonLabel, role }}>
  <div>
    {errorMessage ? (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        <div class="flex items-center">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 3a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 000 2v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>
          <strong>Error:</strong> {errorMessage}
        </div>
      </div>
    ) : null}
    
    {users && users.length === 0 && !errorMessage ? (
      <TableFallback />
    ) : users.length > 0 ? (
      <>
        <TextHeader
          title={"USUARIOS DEL SISTEMA - " + (userName?.toUpperCase() || "ADMIN")}
          subtitle={`Lista de todos los usuarios registrados (${users.length} usuarios encontrados)`}
        />
        
        <section class="bg-white p-6 rounded-lg shadow w-full">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Lista de Usuarios ({users.length})</h2>
          </div>

          <div class="overflow-x-auto">
            <table class="min-w-full bg-white">
              <thead class="bg-gray-200">
                <tr>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">ID</th>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Usuario</th>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Email</th>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Rol</th>
                  <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">Departamento</th>
                  <th class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">Seleccionar</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-200">
                {users.map((user: User, index: number) => (
                  <tr class={index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}>
                    <td class="px-4 py-4 text-sm text-gray-900">{user.user_id}</td>
                    <td class="px-4 py-4">
                      <div class="text-sm font-medium text-gray-900">{user.user_name}</div>
                    </td>
                    <td class="px-4 py-4 text-sm text-gray-900">{user.email}</td>
                    <td class="px-4 py-4">
                      <span class={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        user.role_name === 'Administrador' ? 'bg-purple-100 text-purple-800' :
                        user.role_name === 'N1' ? 'bg-blue-100 text-blue-800' :
                        user.role_name === 'N2' ? 'bg-green-100 text-green-800' :
                        user.role_name === 'Solicitante' ? 'bg-gray-100 text-gray-800' :
                        user.role_name === 'Agencia de viajes' ? 'bg-yellow-100 text-yellow-800' :
                        user.role_name === 'Cuentas por pagar' ? 'bg-red-100 text-red-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {user.role_name}
                      </span>
                    </td>
                    <td class="px-4 py-4 text-sm text-gray-900">{user.department_name}</td>
                    <td class="px-4 py-4 text-center">
                      <input 
                        type="checkbox" 
                        class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                        onclick={`console.log('Usuario seleccionado:', ${user.user_id})`}
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          <div class="mt-4 text-sm text-gray-600">
            <span>Total de usuarios: {users.length}</span>
          </div>
        </section>
      </>
    ) : null}
  </div>
</MainLayout>