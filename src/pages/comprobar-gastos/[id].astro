---

/**
 * Author: José Antonio González and Kenia Esmeralda Ramos Javier
 * Description: This is the page where we separate the content that is stablished for a certain user of Account Payable team.
 * 
 */
 
import MainLayout from "@layouts/MainLayout.astro";
import TextHeader from "@components/TextHeader.astro";
import ReceiptActions from "@components/ReceiptActions";
import type { UserRole } from "@type/roles";

import { getCookie } from "@data/cookies";
import { roleLabels } from "@config/role-labels";
import { apiRequest } from '@utils/apiClient';

const role: UserRole = getCookie("role") as UserRole;
const userName = getCookie("username");
const buttonLabel = roleLabels[role];

const status_colors = {
  'Pending': 'text-warning-400',
  'Aproved': 'text-success-400',
  'Declined': 'text-danger-400',
};

export async function getStaticPaths() {
  //Status corresponding to Accounts Payable COMPROBAR GASTOS
  const status = 6;
  const requests = await apiRequest(`/user/get-travel-requests/${getCookie("department_id")}/${status}`);
  return requests.map((req: any) => ({
    params: { id: req.request_id.toString() },
  }));
}

const { id } = Astro.params;
const request = await apiRequest(`/accounts-payable/get-expense-validations/${id}`);

if (!request) {
  throw new Error(`No request found with ID ${id}`);
}
---

<MainLayout title={`Solicitud #${request.request_id}`} data={{ userName, buttonLabel, role }} >

<main class="flex flex-col items-center">
  <div class="w-full flex flex-col rounded border border-gray-300 p-10">

    <div class="flex justify-between items-center">
      <TextHeader
        title={`SOLICITUD #${request.request_id}`}
        subtitle="Comprobantes de Gastos"
      />
      <h1 class={`text-m ${status_colors[request.status as keyof typeof status_colors]} font-semibold`}>{request.status}</h1>
    </div>
  <div>
    <h3 class="text-xl font-semibold text-gray-800 mb-4 border-b pb-2">Comprobantes</h3>

    {request.Expenses.length === 0 ? (
      <div class="bg-gray-100 p-6 rounded-lg shadow w-full text-center text-gray-500 font-semibold">
        NO HAY COMPROBANTES DE GASTOS PENDIENTES DE COMPROBAR
      </div>
    ) : (
      <div class="grid gap-4">     
        {request.Expenses.map((request: any) => {

          return (
            <div class="grid grid-cols-[2fr_2fr_1fr] gap-6">
              
              <div class="col-span-2 space-y-2 content-wrapper">
                <p class="font-bold text-lg break-words">#{request.receipt_id}</p>
                <div class="text-sm text-gray-700 grid grid-cols-[1fr_2fr] gap-y-1">
                  
                  <p><span class="font-semibold">Monto:</span> {request.amount}</p>
                  <p><span class="font-semibold">Rubro:</span> {request.receipt_type_name}</p>
                  
                  <p class="flex items-center gap-2">
                    <span class="font-semibold">Status:</span>
                    <span class={`inline-block px-3 py-1 text-xs font-semibold rounded-full`}>
                      PENDIENTE
                    </span>
                  </p>
                </div>
              </div>
              
              <div class="flex flex-col justify-center h-full gap-3">
                <a>
                  <button class="btn bg-blue-200 rounded w-full h-12 flex items-center justify-center hover:bg-blue-300 transition-colors">
                    {/* This button should download the receipt */}                    
                    Descargar Comprobante
                  </button>
                  {/* Here is pending the functionality of downloading the receipt */}
                </a>

                <ReceiptActions
                  client:only="react"
                  receipt_id={request.receipt_id}
                  expense_status={request.expense_status}
                />
              </div>
            </div>    
          );
        })}
      </div>
    )}
  </div>
  
</div>
</main>

</MainLayout>
