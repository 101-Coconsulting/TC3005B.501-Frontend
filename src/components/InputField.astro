---
/**
 * InputField.astro
 * 
 * Reusable input field component for form inputs with support for:
 * - Optional labels
 * - Placeholders
 * - Input types (text, email, password, etc.)
 * - Required fields
 * - Error states and messages
 * - Disabled states
 * 
 * Styling follows Tailwind CSS conventions with additional support for global custom properties.
 */

// Define HTMLInputTypeAttribute manually as it is not exported from 'astro/types'
type HTMLInputTypeAttribute = 
  | 'text'
  | 'password'
  | 'email'
  | 'number'
  | 'url'
  | 'tel'
  | 'search'
  | 'date'
  | 'time'
  | 'datetime-local'
  | 'month'
  | 'week'
  | 'color'
  | 'file'
  | 'checkbox'
  | 'radio'
  | 'range'
  | 'hidden'
  | 'submit'
  | 'reset'
  | 'button';

interface Props {
  label?: string;
  name: string;
  placeholder?: string;
  type?: HTMLInputTypeAttribute;
  value?: string;
  required?: boolean;
  error?: string;
  disabled?: boolean;
}

// Destructure and apply default props
const {
  label,
  name,
  placeholder = '',
  type = 'text',
  value = '',
  required = false,
  error = '',
  disabled = false,
} = Astro.props;

// Tailwind + custom variable-based styling
const inputClasses = `
  block w-full px-3 py-2 border rounded-md shadow-sm sm:text-sm
  focus:outline-none focus:ring-2 focus:ring-[--color-primary-300] focus:border-[--color-primary-500]
  ${error ? 'border-red-500' : 'border-[--color-neutral-300]'}
  ${disabled ? 'bg-[--color-neutral-50] cursor-not-allowed' : ''}
`;
---

<div class="mb-4">
  {label && (
    <label for={name} class="block text-sm font-medium mb-1 text-[--color-neutral-500]">
      {label} {required && <span class="text-red-500">*</span>}
    </label>
  )}
  <input
    id={name}
    name={name}
    type={type}
    placeholder={placeholder}
    value={value}
    class={inputClasses}
    required={required}
    disabled={disabled}
    aria-invalid={Boolean(error)}
    aria-describedby={error ? `${name}-error` : undefined} 
  />
  {error && (
    <p id={`${name}-error`} class="text-sm text-red-600 mt-1">
      {error}
    </p>
  )}
</div>